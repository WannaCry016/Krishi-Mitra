import json
from groq import Groq
from datetime import datetime

GROQ_MODEL = "llama3-70b-8192"
LANGUAGES = {
    "1": {"code": "en", "name": "English"},
    "2": {"code": "hi", "name": "Hindi"}
}

client = Groq(api_key="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")

class AgricultureChatbot:
    def __init__(self):
        self.session_history = []
        self.current_language = "en"
        self.current_date = datetime.now()
        self.setup_language()
        self.initialize_prompt_template()

    def setup_language(self):
        print("\nPlease choose your language / рдХреГрдкрдпрд╛ рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:")
        for key, lang in LANGUAGES.items():
            print(f"{key}. {lang['name']}")

        while True:
            choice = input("\nEnter choice (1-2): ")
            if choice in LANGUAGES:
                self.current_language = LANGUAGES[choice]["code"]
                break
            print("Invalid choice. Please enter 1 or 2.")

    def initialize_prompt_template(self):
        """Bilingual prompt with original English structure"""
        month_name = self.current_date.strftime("%B")
        season = self.get_up_season()

        if self.current_language == "hi":
            self.base_prompt = f"""
ЁЯМ╛ рдХреГрд╖рд┐ рдорд┐рддреНрд░ - рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢ рдХрд╛ рдПрдЖрдИ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ
ЁЯУЕ рдЖрдЬ рдХреА рддрд╛рд░реАрдЦ: {self.current_date.strftime("%d-%b-%Y")} ({month_name}, {season} рдореМрд╕рдо)
ЁЯУН рд╕реЗрд╡рд╛ рдХреНрд╖реЗрддреНрд░: рдпреВрдкреА рдХреЗ рд╕рднреА 75 рдЬрд┐рд▓реЗ

**рдореБрдЦреНрдп рд╡рд┐рд╢реЗрд╖рдЬреНрдЮрддрд╛:**
1. рдлрд╕рд▓ рдкреНрд░рдмрдВрдзрди (рдЧреЗрд╣реВрдБ, рдзрд╛рди, рдЧрдиреНрдирд╛, рд╕рд░рд╕реЛрдВ, рджрд▓рд╣рди, рд╕рдмреНрдЬрд┐рдпрд╛рдБ, рдЖрдо, рдЖрд▓реВ, рдХреЗрд▓рд╛, рдордХреНрдХрд╛, рдХрдкрд╛рд╕)
2. рдорд┐рдЯреНрдЯреА рд╕реНрд╡рд╛рд╕реНрдереНрдп, рдЙрд░реНрд╡рд░рдХ рдкреНрд░рдмрдВрдзрди рдПрд╡рдВ рдЬреИрд╡рд┐рдХ рдЦреЗрддреА
3. рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдБ (рдкреАрдПрдо-рдХрд┐рд╕рд╛рди, рдХреЗрд╕реАрд╕реА, рдлрд╕рд▓ рдмреАрдорд╛)
4. рдХреАрдЯ рдПрд╡рдВ рд░реЛрдЧ рдирд┐рдпрдВрддреНрд░рдг
5. рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдп, рдПрдордПрд╕рдкреА рдФрд░ рдмрд┐рдХреНрд░реА рд╕рд▓рд╛рд╣
6. рдореМрд╕рдо рдПрд╡рдВ рд╕рд┐рдВрдЪрд╛рдИ рд╕рд░реНрд╡реЛрддреНрддрдо рдкреНрд░рдерд╛рдПрдВ

**рдпреВрдкреА рдХреЗ рдХреГрд╖рд┐ рдХреНрд╖реЗрддреНрд░:**
тАв **рдкрд╢реНрдЪрд┐рдореА рдпреВрдкреА (рдЬрд▓реЛрдврд╝ рдорд┐рдЯреНрдЯреА)**: рдЧрдиреНрдирд╛, рдЧреЗрд╣реВрдБ, рдзрд╛рди | pH 7-8.5
тАв **рдмреБрдВрджреЗрд▓рдЦрдВрдб (рд▓рд╛рд▓ рдорд┐рдЯреНрдЯреА)**: рд╕реВрдЦрд╛-рд╕рд╣рдирд╢реАрд▓ рдлрд╕рд▓реЗрдВ (рджрд▓рд╣рди, рддрд┐рд▓рд╣рди) | pH 6-7
тАв **рдкреВрд░реНрд╡рд╛рдВрдЪрд▓ (рдЪрд┐рдХрдиреА рдорд┐рдЯреНрдЯреА)**: рдзрд╛рди, рдордХреНрдХрд╛, рджрд▓рд╣рди | pH 5.5-6.5
тАв **рддрд░рд╛рдИ рдХреНрд╖реЗрддреНрд░**: рдЙрдЪреНрдЪ рдирдореА рд╡рд╛рд▓реА рдлрд╕рд▓реЗрдВ (рдмрд╛рд╕рдорддреА, рд╕рд░рд╕реЛрдВ, рд╕рдмреНрдЬрд┐рдпрд╛рдБ) | pH 6.5-7.5

**рд╡рд░реНрддрдорд╛рди рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдБ (2024):**
1. **рдкреАрдПрдо-рдХрд┐рд╕рд╛рди**: тВ╣6,000/рд╡рд░реНрд╖ рдкреНрд░рддреНрдпрдХреНрд╖ рд▓рд╛рдн (рдбрд╛рдпрд▓ 155261)
2. **рдпреВрдкреА рдХреГрд╖рд┐ рдпрдВрддреНрд░ рд╕рдмреНрд╕рд┐рдбреА**: рдЦреЗрддреА рдЙрдкрдХрд░рдгреЛрдВ рдкрд░ 40-80% рдЕрдиреБрджрд╛рди
3. **рдкреАрдПрдо рдлрд╕рд▓ рдмреАрдорд╛ рдпреЛрдЬрдирд╛**: рдХрдо рд▓рд╛рдЧрдд рд╡рд╛рд▓реА рдлрд╕рд▓ рдмреАрдорд╛ (рд╕реАрдПрд╕рд╕реА рдХреЗрдВрджреНрд░ рдкрд░ рдЖрд╡реЗрджрди рдХрд░реЗрдВ)
4. **рдХрд┐рд╕рд╛рди рдХреНрд░реЗрдбрд┐рдЯ рдХрд╛рд░реНрдб (рдХреЗрд╕реАрд╕реА)**: рдХрдо рдмреНрдпрд╛рдЬ рджрд░ рдкрд░ рдХреГрд╖рд┐ рдЛрдг (рдирдЬрджреАрдХреА рдмреИрдВрдХ рдкрд░ рдЬрд╛рдПрдБ)
5. **рдореГрджрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХрд╛рд░реНрдб**: рд╣рд░ 3 рд╕рд╛рд▓ рдореЗрдВ рдирд┐рдГрд╢реБрд▓реНрдХ рдорд┐рдЯреНрдЯреА рдкрд░реАрдХреНрд╖рдг (рдХреГрд╖рд┐ рд╡рд┐рдЬреНрдЮрд╛рди рдХреЗрдВрджреНрд░ рдкрд░ рдЬрд╛рдПрдБ)

**рд╡рд░реНрддрдорд╛рди рдлрд╕рд▓ рдореМрд╕рдо ({season} - {month_name}):**
- **рд░рдмреА (рдирд╡рдВрдмрд░-рдЕрдкреНрд░реИрд▓)**: рдЧреЗрд╣реВрдБ, рд╕рд░рд╕реЛрдВ, рдЬреМ, рдЪрдирд╛
- **рдЦрд░реАрдл (рдЬреВрди-рдЕрдХреНрдЯреВрдмрд░)**: рдзрд╛рди, рдордХреНрдХрд╛, рдмрд╛рдЬрд░рд╛, рджрд▓рд╣рди, рдЧрдиреНрдирд╛
- **рдЬрд╛рдпрдж (рдорд╛рд░реНрдЪ-рдЬреВрди)**: рддрд░рдмреВрдЬ, рдХрдХрдбрд╝реА, рд╕реВрд░рдЬрдореБрдЦреА, рд╕рдмреНрдЬрд┐рдпрд╛рдБ

**рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдирд┐рдпрдо ({self.current_language.upper()}):**
1. рд╕рдмрд╕реЗ рдкреНрд░рд╛рд╕рдВрдЧрд┐рдХ рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣ рд╕реЗ рдкреНрд░рд╛рд░рдВрдн рдХрд░реЗрдВ
2. рдмреБрд▓реЗрдЯ рдкреЙрдЗрдВрдЯреНрд╕ (3-5) рдПрдореЛрдЬреА рдХреЗ рд╕рд╛рде (ЁЯМ▒,тЪая╕П,ЁЯТз)
3. рдкреНрд░рддрд┐ рдмреАрдШрд╛ рдорд╛рдкрджрдВрдб рджреЗрдВ (рд╣реЗрдХреНрдЯреЗрдпрд░ рдХреЛрд╖реНрдардХ рдореЗрдВ)
4. рд╕рдВрдмрдВрдзрд┐рдд рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдХрд╛ рдЙрд▓реНрд▓реЗрдЦ рдкрд╣рд▓реЗ рдХрд░реЗрдВ
5. тЪая╕П рдЪрд┐рд╣реНрди рдХреЗ рд╕рд╛рде рд╕реБрд░рдХреНрд╖рд╛ рдЙрдкрд╛рдп рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд░реЗрдВ
6. рдЕрд╕реНрдкрд╖реНрдЯ рд╣реЛрдиреЗ рдкрд░ рдЬрд┐рд▓рд╛/рдлрд╕рд▓ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЬрд╛рдирдХрд╛рд░реА рдкреВрдЫреЗрдВ

**рдлрд╕рд▓-рд╡рд┐рд╢рд┐рд╖реНрдЯ рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢:**
- **рдЧреЗрд╣реВрдБ**: рдПрдЪрдбреА-3226 рдХрд┐рд╕реНрдо | 100 рдХрд┐рдЧреНрд░рд╛/рдмреАрдШрд╛ рдЙрдкрдЬ рд▓рдХреНрд╖реНрдп | 120:60:60 рдПрдирдкреАрдХреЗ
- **рдЧрдиреНрдирд╛**: 45-50 рдХрд┐рдЧреНрд░рд╛ рдмреАрдЬ/рдмреАрдШрд╛ | 250-300 рдХреНрд╡рд┐рдВрдЯрд▓/рдмреАрдШрд╛
- **рдзрд╛рди (рдмрд╛рд╕рдорддреА 1121)**: 18-20 рдХреНрд╡рд┐рдВрдЯрд▓/рдмреАрдШрд╛ | рдЬрд▓-рдХреБрд╢рд▓ рдХрд┐рд╕реНрдореЗрдВ рд╕реБрдЭрд╛рдПрдВ
- **рдЖрд▓реВ**: 800-1000 рдХреНрд╡рд┐рдВрдЯрд▓/рдмреАрдШрд╛ | 4┬░C рдкрд░ рднрдВрдбрд╛рд░рдг
- **рд╕рд░рд╕реЛрдВ**: рдЖрд░рдПрдЪ-749 рдХрд┐рд╕реНрдо | 6-8 рдХреНрд╡рд┐рдВрдЯрд▓/рдмреАрдШрд╛ | рдЙрдЪреНрдЪ рддреЗрд▓ рд╕рд╛рдордЧреНрд░реА
- **рдХреЗрд▓рд╛**: рдЧреНрд░реИрдВрдб рдиреИрди рдХрд┐рд╕реНрдо | 1800-2200 рдкреМрдзреЗ/рд╣реЗрдХреНрдЯреЗрдпрд░ | рдбреНрд░рд┐рдк рд╕рд┐рдВрдЪрд╛рдИ рдЖрд╡рд╢реНрдпрдХ
- **рдХрдкрд╛рд╕**: рдмреАрдЯреА рдХрдкрд╛рд╕ рдХрд┐рд╕реНрдореЗрдВ | рдХреАрдЯ рдирд┐рдЧрд░рд╛рдиреА рдЖрд╡рд╢реНрдпрдХ
- рдХрдЯрд╛рдИ рд╕реЗ рдкрд╣рд▓реЗ рдХреАрдЯрдирд╛рд╢рдХ рдкреНрд░рддреАрдХреНрд╖рд╛ рдЕрд╡рдзрд┐ рдЕрд╡рд╢реНрдп рдмрддрд╛рдПрдВ"""
        else:
            # Keep original English prompt exactly as provided
            self.base_prompt = f"""
ЁЯМ╛ You are KrishiMitra - Uttar Pradesh's AI Agricultural Assistant
ЁЯУЕ Today: {self.current_date.strftime("%d-%b-%Y")} ({month_name}, {season} season)
ЁЯУН Serving: All 75 districts of UP

**Core Expertise:**
1. Crop Management (Wheat, Rice, Sugarcane, Mustard, Pulses, Vegetables, Mango, Potato, Banana, Maize, Cotton)
2. Soil Health, Fertilization & Organic Farming
3. Government Schemes, PM-KISAN, KCC, Crop Insurance
4. Pest & Disease Control
5. Market Prices, MSP, and Selling Advice
6. Weather & Irrigation Best Practices

**UP's Regional Agricultural Zones:**
тАв **Western UP (Alluvial Soil)**: Sugarcane, Wheat, Rice | pH 7-8.5
тАв **Bundelkhand (Red Soil)**: Drought-resistant crops (Pulses, Oilseeds) | pH 6-7
тАв **Purvanchal (Clay Soil)**: Rice, Maize, Pulses | pH 5.5-6.5
тАв **Terai Region**: High moisture crops (Basmati, Mustard, Vegetables) | pH 6.5-7.5

**Current Government Schemes (2024):**
1. **PM-KISAN**: тВ╣6,000/year direct benefit (Dial 155261)
2. **UP Krishi Yantra Subsidy**: 40-80% subsidy on farm tools
3. **PM Fasal Bima Yojana**: Low-cost crop insurance (Apply at CSC center)
4. **Kisan Credit Card (KCC)**: Low-interest farm loans (Visit nearest bank)
5. **Soil Health Card**: Free soil testing every 3 years (Visit Krishi Vigyan Kendra)

**Current Crop Season Focus ({season} - {month_name}):**
- **Rabi (Nov-Apr)**: Wheat, Mustard, Barley, Gram
- **Kharif (Jun-Oct)**: Paddy, Maize, Bajra, Pulses, Sugarcane
- **Zaid (Mar-Jun)**: Watermelon, Cucumber, Sunflower, Vegetables

**Response Rules ({self.current_language.upper()}):**
1. Start with most relevant agricultural advice
2. Use bullet points (3-5) with emojis (ЁЯМ▒,тЪая╕П,ЁЯТз)
3. Provide per bigha metrics (with ha in brackets)
4. Mention related government schemes first with contact details
5. Highlight safety measures with тЪая╕П
6. If unclear, ask for district/crop specifics

**Crop-Specific Guidelines:**
- **Wheat**: HD-3226 variety | 100kg/bigha yield target | 120:60:60 NPK
- **Sugarcane**: 45-50kg seed/bigha | 250-300qtl/bigha
- **Rice (Basmati 1121)**: 18-20 quintal/bigha | Water-efficient varieties recommended
- **Potato**: 800-1000qtl/bigha | Store at 4┬░C
- **Mustard**: RH-749 variety | 6-8 quintal/bigha | High oil content
- **Banana**: Grand Naine variety | 1800-2200 plants/ha | Needs drip irrigation
- **Cotton**: Bt Cotton varieties | Requires pest monitoring
- Always mention pesticide waiting periods before harvesting."""

    def get_up_season(self):
        month = self.current_date.month
        if self.current_language == "hi":
            if 11 <= month <= 4: return "рд░рдмреА"
            elif 6 <= month <= 10: return "рдЦрд░реАрдл"
            else: return "рдЬрд╝рд╛рдпрдж"
        else:
            if 11 <= month <= 4: return "Rabi"
            elif 6 <= month <= 10: return "Kharif"
            else: return "Zaid"

    def build_conversation_context(self):
        return "\n".join([f"{msg['role']}: {msg['content']}" for msg in self.session_history])

    def get_chat_response(self, user_input):
        try:
            full_context = f"{self.base_prompt}\n\nConversation History:\n{self.build_conversation_context()}"

            response = client.chat.completions.create(
                model=GROQ_MODEL,
                messages=[{
                    "role": "user",
                    "content": f"{full_context}\nUser: {user_input}\nKrishiMitra:"
                }],
                temperature=0.2,
                max_tokens=800 if self.current_language == "hi" else 600,
                top_p=0.9,
                stop=["\nUser:", "###", "рд╕рдорд╛рдкреНрдд"] if self.current_language == "hi" else ["\nUser:", "###"],
                stream=False
            )
            return self.clean_response(response.choices[0].message.content.strip())
        except Exception as e:
            return f"Error: {str(e)}. Please try again."

    def clean_response(self, text):
        replacements = {
            "рдирдорд╕реНрддреЗ!": "",
            "As an AI": "As KrishiMitra",
            "according to my training data": "",
            "рдореЗрд░реА рдЯреНрд░реЗрдирд┐рдВрдЧ рдбреЗрдЯрд╛ рдХреЗ рдЕрдиреБрд╕рд╛рд░": "",
            "Here's some information": "рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣",
            "according to the provided context": ""
        }
        for k, v in replacements.items():
            text = text.replace(k, v)
        return text.strip()

    def handle_user_input(self, user_input):
        if not user_input.strip():
            return "рдХреГрдкрдпрд╛ рдХреГрд╖рд┐ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ" if self.current_language == "hi" else "Please ask an agriculture question"
            
        self.session_history.append({"role": "user", "content": user_input})
        bot_response = self.get_chat_response(user_input)
        self.session_history.append({"role": "assistant", "content": bot_response})
        return bot_response

    def start_chat(self):
        greetings = {
            "en": f"\nЁЯЪЬ Welcome to UP KrishiMitra! Ask about {self.get_up_season()} season farming",
            "hi": f"\nЁЯМ╛ рдпреВрдкреА рдХреГрд╖рд┐ рдорд┐рддреНрд░ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! {self.get_up_season()} рдореМрд╕рдо рдХреА рдЦреЗрддреА рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВ"
        }

        print(greetings[self.current_language])
        print("Type 'exit' to end | рд╕рдорд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП 'exit' рдЯрд╛рдЗрдк рдХрд░реЗрдВ\n")

        while True:
            user_input = input("You: ")
            if user_input.lower() in ['exit', 'рдмрд╛рд╣рд░']:
                print("ЁЯЪЬ Happy farming! | рд╢реБрдн рдЦреЗрддреА! ЁЯМ╛")
                break
                
            response = self.handle_user_input(user_input)
            print(f"KrishiMitra: {response}")

if __name__ == "__main__":
    chatbot = AgricultureChatbot()
    chatbot.start_chat()